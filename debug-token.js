// Debug script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT token
// ‡∏£‡∏±‡∏ô‡πÉ‡∏ô Browser Console

console.log('üîç === TOKEN DEBUG ===');

// 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡πÉ‡∏ô localStorage
const token = localStorage.getItem('authToken');
console.log('üìù Token exists:', !!token);
console.log('üìù Token length:', token?.length);

if (token) {
  try {
    // 2. Parse JWT payload
    const parts = token.split('.');
    console.log('üìù JWT parts:', parts.length);
    
    if (parts.length === 3) {
      const payload = JSON.parse(atob(parts[1]));
      console.log('üìù JWT Payload:', payload);
      
      // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö expiration
      const now = Math.floor(Date.now() / 1000);
      const exp = payload.exp;
      console.log('üìù Current time:', now);
      console.log('üìù Token expires:', exp);
      console.log('üìù Token expired:', now > exp);
      console.log('üìù Time remaining:', exp - now, 'seconds');
      
      // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö user data
      console.log('üìù User ID:', payload.userId);
      console.log('üìù Username:', payload.username);
      console.log('üìù Role:', payload.role);
    }
  } catch (error) {
    console.error('‚ùå Error parsing token:', error);
  }
}

// 5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API call
if (token) {
  fetch('http://localhost:3001/api/permissions/me', {
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    }
  })
  .then(res => {
    console.log('üìù API Response Status:', res.status);
    return res.json();
  })
  .then(data => {
    console.log('üìù API Response:', data);
  })
  .catch(error => {
    console.error('‚ùå API Error:', error);
  });
}
