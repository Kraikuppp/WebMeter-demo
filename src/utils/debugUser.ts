// Debug utility to check user data in localStorage
export function debugUserData() {
  console.log('üîç === USER DEBUG INFO ===');
  
  // Check all possible user-related localStorage keys
  const keys = [
    'userUsername',
    'userEmail', 
    'auth_token',
    'authToken',
    'isGuest',
    'rememberMe'
  ];
  
  keys.forEach(key => {
    const value = localStorage.getItem(key);
    console.log(`üìù ${key}:`, value);
  });
  
  // Try to decode JWT tokens
  const tokens = ['auth_token', 'authToken'];
  tokens.forEach(tokenKey => {
    const token = localStorage.getItem(tokenKey);
    if (token) {
      try {
        const payload = JSON.parse(atob(token.split('.')[1] || ''));
        console.log(`üîì Decoded ${tokenKey}:`, payload);
      } catch (error) {
        console.log(`‚ùå Failed to decode ${tokenKey}:`, error);
      }
    }
  });
  
  console.log('üîç === END USER DEBUG ===');
}

// Function to get current user (same logic as Event Logger)
export function getCurrentUserDebug(): string {
  try {
    // ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö navigation ‡πÅ‡∏ï‡πà‡πÅ‡∏¢‡∏Å username ‡πÅ‡∏•‡∏∞ level ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
    const token = localStorage.getItem('auth_token');
    let username = localStorage.getItem('userUsername') || localStorage.getItem('userEmail') || '';
    let actualUsername = username; // ‡πÄ‡∏Å‡πá‡∏ö username ‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
    
    console.log('üîç Debug getCurrentUser:');
    console.log('üìù Initial userUsername:', localStorage.getItem('userUsername'));
    console.log('üìù Initial userEmail:', localStorage.getItem('userEmail'));
    
    // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å JWT token ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (token) {
      try {
        const payload = JSON.parse(atob(token.split('.')[1] || ''));
        console.log('üîì Token payload:', payload);
        
        // ‡πÅ‡∏¢‡∏Å‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á username ‡∏à‡∏£‡∏¥‡∏á‡∏Å‡∏±‡∏ö level
        console.log('üîç Checking payload fields:');
        console.log('  - payload.username:', payload.username);
        console.log('  - payload.displayName:', payload.displayName);
        console.log('  - payload.name:', payload.name);
        console.log('  - payload.email:', payload.email);
        console.log('  - payload.level:', payload.level);
        
        // ‡πÉ‡∏ä‡πâ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: username > displayName > name > email
        if (payload.username) {
          actualUsername = payload.username;
          console.log('‚úÖ Using payload.username:', actualUsername);
        } else if (payload.displayName) {
          actualUsername = payload.displayName;
          console.log('‚úÖ Using payload.displayName:', actualUsername);
        } else if (payload.name && !['guest', 'operator', 'admin', 'manager', 'supervisor', 'engineer'].includes(payload.name.toLowerCase())) {
          // ‡πÉ‡∏ä‡πâ payload.name ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà level
          actualUsername = payload.name;
          console.log('‚úÖ Using payload.name (not a level):', actualUsername);
        } else if (payload.name) {
          // ‡∏ñ‡πâ‡∏≤ payload.name ‡πÄ‡∏õ‡πá‡∏ô level ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ username ‡∏≠‡∏∑‡πà‡∏ô ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ name ‡∏Å‡πà‡∏≠‡∏ô
          actualUsername = payload.name;
          console.log('‚úÖ Using payload.name (might be username):', actualUsername);
        } else if (payload.email) {
          actualUsername = payload.email;
          console.log('‚úÖ Using payload.email:', actualUsername);
        } else {
          console.log('‚ö†Ô∏è No suitable username field found in payload');
        }
      } catch (decodeError) {
        console.error('‚ùå Error decoding token:', decodeError);
      }
    }
    
    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ username ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏à‡∏≤‡∏Å authToken
    if (!actualUsername || actualUsername === 'null' || actualUsername === 'undefined') {
      console.log('‚ö†Ô∏è No username from auth_token, trying authToken...');
      const authToken = localStorage.getItem('authToken');
      if (authToken) {
        try {
          const payload = JSON.parse(atob(authToken.split('.')[1] || ''));
          console.log('üîì AuthToken payload:', payload);
          actualUsername = payload.username || payload.displayName || payload.email || '';
          console.log('‚úÖ Using username from authToken:', actualUsername);
        } catch (decodeError) {
          console.error('‚ùå Error decoding authToken:', decodeError);
        }
      }
    }
    
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ username ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ (‡πÑ‡∏°‡πà override ‡πÄ‡∏õ‡πá‡∏ô guest)
    if (actualUsername && actualUsername !== 'null' && actualUsername !== 'undefined') {
      console.log('‚úÖ Final username:', actualUsername);
      return actualUsername;
    }
    
    // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ username ‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏•‡∏¢ ‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡πÉ‡∏ä‡πâ 'guest'
    const isGuest = localStorage.getItem('isGuest');
    if (isGuest === 'true') {
      console.log('üë§ Guest user detected (no real username found)');
      return 'guest';
    }
    
  } catch (error) {
    console.error('‚ùå Error getting current user:', error);
  }
  
  console.log('‚ö†Ô∏è No user found, using anonymous');
  return 'anonymous';
}

// Export to window for easy debugging in console
if (typeof window !== 'undefined') {
  (window as any).debugUserData = debugUserData;
  (window as any).getCurrentUserDebug = getCurrentUserDebug;
}
