// API Routes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ User Permissions
const express = require('express');
const jwt = require('jsonwebtoken');
const db = require('../config/database');

const router = express.Router();

// Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT token
function authenticateToken(req, res, next) {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN

  if (!token) {
    return res.status(401).json({
      success: false,
      error: 'Authentication token required'
    });
  }

  jwt.verify(token, process.env.JWT_SECRET, async (err, decoded) => {
    if (err) {
      return res.status(403).json({
        success: false,
        error: 'Invalid or expired token'
      });
    }
    
    try {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å database ‡∏û‡∏£‡πâ‡∏≠‡∏° role
      const userQuery = `
        SELECT 
          u.id, u.username, u.name, u.surname, u.email, r.role_name as level, u.line_id, u.role_id,
          r.role_name
        FROM users.users u
        LEFT JOIN users.roles r ON u.role_id = r.id
        WHERE u.id = $1
      `;
      const userResult = await db.query(userQuery, [decoded.userId]);
      
      if (userResult.rows.length === 0) {
        return res.status(401).json({
          success: false,
          error: 'User not found'
        });
      }
      
      req.user = userResult.rows[0]; // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å database
      next();
    } catch (error) {
      console.error('Error fetching user data:', error);
      return res.status(500).json({
        success: false,
        error: 'Authentication error'
      });
    }
  });
}

// ‡∏î‡∏∂‡∏á permissions ‡∏Ç‡∏≠‡∏á role ‡∏à‡∏≤‡∏Å database
async function getRolePermissions(roleName) {
  try {
    const query = `
      SELECT 
        rp.module,
        rp.can_read,
        rp.can_write,
        rp.can_report
      FROM users.roles r
      JOIN users.role_permissions rp ON r.id = rp.role_id
      WHERE r.role_name = $1
    `;
    
    const result = await db.query(query, [roleName]);
    const permissions = {};
    
    result.rows.forEach(row => {
      permissions[row.module] = {
        read: row.can_read,
        write: row.can_write,
        report: row.can_report
      };
    });
    
    return permissions;
  } catch (error) {
    console.error('Error fetching role permissions:', error);
    return {};
  }
}

// Default permissions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö roles ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô database
function getDefaultPermissions(role) {
  const allModules = [
    'Dashboard', 'Table Data', 'Online Data', 'Graph Data', 'Line Graph',
    'Demand Graph', 'Energy Graph', 'Compare Graph', 'TOU', 'TOU Demand Graph',
    'TOU Energy Graph', 'TOU Compare Graph', 'Charge', 'Event', 'Config',
    'Export Data', 'Email Line', 'User Management', 'Meter Tree', 'Holiday'
  ];
  
  const permissions = {};
  
  switch (role?.toLowerCase()) {   
    case 'test':
      // Test role ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á (copy from admin) ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô User Management
      allModules.forEach(module => {
        if (module === 'User Management') {
          permissions[module] = { read: false, write: false, report: false };
        } else {
          permissions[module] = { read: true, write: true, report: true };
        }
      });
      break;
      
    case 'guest':
    default:
      // Guest ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ view ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ write ‡∏´‡∏£‡∏∑‡∏≠ report
      const guestAllowedModules = [
        'Dashboard', 'Table Data', 'Graph Data', 'Line Graph', 
        'Demand Graph', 'Energy Graph', 'Compare Graph'
      ];
      
      allModules.forEach(module => {
        if (guestAllowedModules.includes(module)) {
          permissions[module] = { read: true, write: false, report: false };
        } else {
          permissions[module] = { read: false, write: false, report: false };
        }
      });
      break;
  }
  
  console.log(`üìã Generated default permissions for role "${role}":`, Object.keys(permissions).filter(m => permissions[m].read));
  return permissions;
}

// GET /api/permissions/me - ‡∏î‡∏∂‡∏á permissions ‡∏Ç‡∏≠‡∏á user ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
router.get('/me', authenticateToken, async (req, res) => {
  try {
    const user = req.user;
    // ‡πÉ‡∏ä‡πâ role_name ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å (‡∏à‡∏≤‡∏Å role_id -> roles.role_name)
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ role_name ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ level ‡πÄ‡∏õ‡πá‡∏ô fallback
    let userRole = user.role_name || user.level || 'Guest';
    
    // Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö role assignment logic
    console.log('üîç === ROLE DETECTION DEBUG ===');
    console.log('üìù user.role_id:', user.role_id);
    console.log('üìù user.role_name (from JOIN):', user.role_name);
    console.log('üìù user.level (fallback):', user.level);
    console.log('üìù Final userRole:', userRole);
    
    console.log(`üìã Getting permissions for user: ${user.username}`);
    console.log(`üìù User level: ${user.level}`);
    console.log(`üìù User role_name: ${user.role_name}`);
    console.log(`üìù Final role used: ${userRole}`);
    
    // Admin ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á
    if (userRole === 'Admin') {
      const allModules = [
        'Dashboard', 'Table Data', 'Online Data', 'Graph Data', 'Line Graph',
        'Demand Graph', 'Energy Graph', 'Compare Graph', 'TOU', 'TOU Demand Graph',
        'TOU Energy Graph', 'TOU Compare Graph', 'Charge', 'Event', 'Config',
        'Export Data', 'Email Line', 'User Management', 'Meter Tree', 'Holiday'
      ];
      
      const adminPermissions = {};
      allModules.forEach(module => {
        adminPermissions[module] = { read: true, write: true, report: true };
      });
      
      return res.json({
        success: true,
        data: {
          user: {
            username: user.username,
            role: userRole
          },
          permissions: adminPermissions,
          isAdmin: true
        }
      });
    }
    
    // ‡∏î‡∏∂‡∏á permissions ‡∏à‡∏≤‡∏Å database
    let permissions = await getRolePermissions(userRole);
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ permissions ‡πÉ‡∏ô database ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ default permissions
    if (Object.keys(permissions).length === 0) {
      console.log(`‚ö†Ô∏è No role permissions found for ${userRole}, using default permissions`);
      permissions = getDefaultPermissions(userRole);
    }
    
    console.log(`üîç Final permissions for ${userRole}:`, permissions);
    console.log(`üìä Available modules:`, Object.keys(permissions));
    
    res.json({
      success: true,
      data: {
        user: {
          username: user.username,
          role: userRole
        },
        permissions,
        isAdmin: false
      }
    });
    
  } catch (error) {
    console.error('Error getting user permissions:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to get user permissions'
    });
  }
});

// GET /api/permissions/check/:module/:action - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞
router.get('/check/:module/:action', authenticateToken, async (req, res) => {
  try {
    const { module, action } = req.params;
    const user = req.user;
    const userRole = user.role_name || user.level;
    
    // Admin ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á
    if (userRole === 'Admin') {
      return res.json({
        success: true,
        hasPermission: true,
        reason: 'Admin access'
      });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö permissions
    const permissions = await getRolePermissions(userRole);
    const hasPermission = permissions[module] && permissions[module][action];
    
    res.json({
      success: true,
      hasPermission,
      reason: hasPermission ? 'Permission granted' : 'Permission denied',
      details: {
        module,
        action,
        userRole,
        available: permissions[module] || null
      }
    });
    
  } catch (error) {
    console.error('Error checking permission:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to check permission'
    });
  }
});

module.exports = router;
